{"version":3,"sources":["components/Element/ElementSymbol.js","components/Element/ElementAtomicNumber.js","components/Element/ElementName.js","components/Element/ElementInfoCard.js","utils/EventEmitter.js","components/Element/ElementBox.js","components/PeriodicTable.js","components/Panel.js","App.js","reportWebVitals.js","index.js"],"names":["ElementSymbol","props","mesh","useRef","useLayoutEffect","current","geometry","center","active","hovered","panelHover","text","symbol","textOptions","font","FontLoader","parse","Roboto","size","height","curveSegments","bevelEnabled","ref","attach","args","color","ElementAtomicNumber","atomicNumber","toString","position","ElementName","name","ElementInfoCard","useState","hidden","setVisible","Html","style","border","boxSizing","padding","width","background","borderRadius","fontSize","transition","opacity","transform","distanceFactor","occlude","onOcclude","className","element","atomic_mass","href","source","target","EventEmitter","ElementBox","iMesh","setActive","setHover","panelClassHover","setPanelClassHover","addListener","e","category","zposition","useSpring","config","wobbly","opa","lanthanide","metalloid","actinide","ThePositon","xpos","ypos","group","position-z","onClick","stopPropagation","onPointerOver","onPointerOut","meshBasicMaterial","wireframe","transparent","number","PeriodicTable","id","camera","data","elements","map","xoffset","yoffset","OrbitControls","Panel","handleMouseEnter","emit","innerText","handleMouseLeave","onMouseEnter","onMouseLeave","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a71efdfd.chunk.js","sourcesContent":["import React, { useRef, useLayoutEffect } from 'react';\nimport Roboto from '../../assets/helvetiker_regular.typeface.json';\nimport { FontLoader } from 'three';\n\nfunction ElementSymbol(props) {\n    const mesh = useRef(null);\n\n    useLayoutEffect(() => {\n        mesh.current.geometry.center();\n    }, [props.active, props.hovered, props.panelHover]);\n\n    const text = props.symbol || 'H';\n    const font = new FontLoader().parse(Roboto);\n    const textOptions = {\n        font: font,\n        size: 0.3,\n        height: 0.02,\n        curveSegments: 5,\n        bevelEnabled: false,\n    };\n    return (\n        <mesh ref={mesh}>\n            <textBufferGeometry attach='geometry' args={[text, textOptions]} />\n            <meshBasicMaterial\n                attach='material'\n                color={props.color || 'white'}\n            />\n        </mesh>\n    );\n}\n\nexport default ElementSymbol;\n","import React, { useRef, useLayoutEffect } from 'react';\nimport Roboto from '../../assets/helvetiker_regular.typeface.json';\nimport { FontLoader } from 'three';\n\nfunction ElementAtomicNumber(props) {\n    const mesh = useRef(null);\n\n    useLayoutEffect(() => {\n        mesh.current.geometry.center();\n    }, [props.active, props.hovered, props.panelHover]);\n\n    const text = props.atomicNumber.toString() || '1';\n    const font = new FontLoader().parse(Roboto);\n    const textOptions = {\n        font: font,\n        size: 0.1,\n        height: 0.02,\n        curveSegments: 5,\n        bevelEnabled: false,\n    };\n    return (\n        <mesh ref={mesh} position={[0.2, 0.3, 0]}>\n            <textGeometry attach='geometry' args={[text, textOptions]} />\n            <meshBasicMaterial\n                attach='material'\n                color={props.color || 'white'}\n            />\n        </mesh>\n    );\n}\n\nexport default ElementAtomicNumber;\n","import React, { useRef, useLayoutEffect } from 'react';\nimport Roboto from '../../assets/helvetiker_regular.typeface.json';\nimport { FontLoader } from 'three';\n\nfunction ElementName(props) {\n    const mesh = useRef(null);\n\n    useLayoutEffect(() => {\n        mesh.current.geometry.center();\n    }, [props.active, props.hovered, props.panelHover]);\n\n    const text = props.name || 'Hydrohen';\n    const font = new FontLoader().parse(Roboto);\n    const textOptions = {\n        font: font,\n        size: 0.1,\n        height: 0.02,\n        curveSegments: 5,\n        bevelEnabled: false,\n    };\n    return (\n        <mesh ref={mesh} position={[0, -0.3, 0]}>\n            <textGeometry attach='geometry' args={[text, textOptions]} />\n            <meshBasicMaterial\n                attach='material'\n                color={props.color || 'white'}\n            />\n        </mesh>\n    );\n}\n\nexport default ElementName;\n","import React, { useState } from 'react';\nimport { Html } from '@react-three/drei';\n\nfunction ElementInfoCard(props) {\n    const [hidden, setVisible] = useState(false);\n\n    return (\n        <mesh>\n            <Html\n                style={{\n                    border: '1px solid rgba(255, 255, 255, 0.5)',\n                    boxSizing: 'border-box',\n                    padding: '20px',\n                    width: '600px',\n                    height: '600px',\n                    background: 'rgba(255, 255, 255, 0.1)',\n                    borderRadius: '10px',\n                    color: 'white',\n                    fontSize: '36px',\n                    transition: 'all 0.2s',\n                    opacity: hidden ? 0 : 1,\n                    transform: `scale(${hidden ? 0.5 : 1})`,\n                    'box-shadow': '0 25px 45px rgba(0, 0, 0, 0.1)',\n                }}\n                distanceFactor={1.5}\n                position={[1.5, -1.5, 1]}\n                transform\n                occlude\n                onOcclude={setVisible}\n            >\n                <div className='TDhtml'>\n                    <p>{props.element.atomic_mass} g/mol</p>\n                    <a href={props.element.source} target='_blank'>\n                        {props.element.symbol}\n                    </a>\n                    <p>{props.element.name}</p>\n                </div>\n            </Html>\n        </mesh>\n    );\n}\n\nexport default ElementInfoCard;\n","import { EventEmitter } from 'fbemitter';\n\nexport default new EventEmitter();\n","import React, { useRef, useState, useContext } from 'react';\nimport ElementSymbol from './ElementSymbol';\nimport ElementAtomicNumber from './ElementAtomicNumber';\nimport ElementName from './ElementName';\nimport { useSpring, animated, config } from '@react-spring/three';\nimport ElementInfoCard from './ElementInfoCard';\nimport EventEmitter from '../../utils/EventEmitter';\n\nfunction ElementBox(props) {\n    const iMesh = useRef();\n    const [active, setActive] = useState(false);\n    const [hovered, setHover] = useState(false);\n    const [panelClassHover, setPanelClassHover] = useState(false);\n\n    EventEmitter.addListener('PanelClassHover', (e) => {\n        if (e === props.element.category) {\n            setPanelClassHover(true);\n        }\n    });\n\n    EventEmitter.addListener('PanelClassNotHover', () => {\n        setPanelClassHover(false);\n    });\n\n    // EventEmitter.addListener('PanelClassHoverPasif', (e) => {\n    //   if (e === 'leave') {\n    //     setActive(false);\n    //   }\n    // });\n\n    const { zposition } = useSpring({\n        zposition: active || panelClassHover ? 2 : 1,\n        config: config.wobbly,\n    });\n\n    const { opa } = useSpring({\n        opa: hovered || active || panelClassHover ? 0.2 : 0.1,\n        config: config.wobbly,\n    });\n\n    const colorMap = {\n        'noble gas': '#04bcd4',\n        'alkaline earth metal': '#ff9800',\n        'diatomic nonmetal': '#673ab7',\n        'alkali metal': '#f44336',\n        'transition metal': '#efbb31',\n        'post-transition metal': '#218380',\n        'polyatomic nonmetal': '#03a9f3',\n        lanthanide: '#8bc34a',\n        metalloid: '#73D2DE',\n        actinide: '#ccdc3a',\n    };\n\n    const color = colorMap[props.element.category] || 'white';\n\n    const xpos = props.element.xpos - 8;\n    const ypos = props.element.ypos * -1 + 6.5;\n\n    const ThePositon = [xpos, ypos, 1];\n\n    const handleClick = (e) => {\n        e.stopPropagation();\n        setActive(!active);\n    };\n\n    const handlePointerOver = (e) => {\n        e.stopPropagation();\n        setHover(true);\n    };\n\n    const handlePointerOut = (e) => {\n        e.stopPropagation();\n        setHover(false);\n    };\n\n    return (\n        <animated.group\n            position-z={zposition}\n            onClick={handleClick}\n            onPointerOver={handlePointerOver}\n            onPointerOut={handlePointerOut}\n            ref={iMesh}\n            position={ThePositon}\n        >\n            <mesh>\n                <boxBufferGeometry />\n                <animated.meshBasicMaterial\n                    color={color}\n                    wireframe={false}\n                    transparent={true}\n                    opacity={opa}\n                />\n            </mesh>\n            <ElementSymbol\n                symbol={props.element.symbol}\n                color={color}\n                active={active}\n                hovered={hovered}\n                panelHover={panelClassHover}\n            />\n            <ElementAtomicNumber\n                atomicNumber={props.element.number}\n                color={color}\n                active={active}\n                hovered={hovered}\n                panelHover={panelClassHover}\n            />\n            <ElementName\n                name={props.element.name}\n                color={color}\n                active={active}\n                hovered={hovered}\n                panelHover={panelClassHover}\n            />\n            {active && <ElementInfoCard element={props.element} />}\n        </animated.group>\n    );\n}\n\nexport default ElementBox;\n","import React, { useState, useEffect } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport ElementBox from './Element/ElementBox';\nimport { OrbitControls } from '@react-three/drei';\nimport data from '../assets/periodicTable.json';\n\nfunction PeriodicTable(props) {\n  return (\n    <div id='canvas-container'>\n      <Canvas camera={{ position: [0, 0, 12] }}>\n        {data.elements.map((element) => {\n          let xoffset = (element.xpos - 1) / 50;\n          element.xpos += xoffset;\n\n          let yoffset = (element.ypos - 1) / 50;\n          element.ypos += yoffset;\n\n          return <ElementBox key={element.name} element={element} />;\n        })}\n        <OrbitControls />\n      </Canvas>\n    </div>\n  );\n}\n\nexport default PeriodicTable;\n","import { useState, useContext } from 'react';\nimport EventEmitter from '../utils/EventEmitter';\n\nfunction Panel() {\n    const handleMouseEnter = (e) => {\n        EventEmitter.emit('PanelClassHover', e.target.innerText);\n    };\n\n    const handleMouseLeave = (e) => {\n        EventEmitter.emit('PanelClassNotHover', 'Not');\n    };\n\n    return (\n        <div>\n            <div id='elementClassesContainer'>\n                <h1>Periodic Table</h1>\n\n                <div className='elementClasses'>\n                    <div\n                        className='class'\n                        onMouseEnter={handleMouseEnter}\n                        onMouseLeave={handleMouseLeave}\n                    >\n                        <span>alkali metal</span>\n                        <div className='classColor'></div>\n                    </div>\n\n                    <div\n                        className='class'\n                        onMouseEnter={handleMouseEnter}\n                        onMouseLeave={handleMouseLeave}\n                    >\n                        <span>alkaline earth metal</span>\n                        <div className='classColor'></div>\n                    </div>\n\n                    <div\n                        className='class'\n                        onMouseEnter={handleMouseEnter}\n                        onMouseLeave={handleMouseLeave}\n                    >\n                        <span>lanthanide</span>\n                        <div className='classColor'></div>\n                    </div>\n\n                    <div\n                        className='class'\n                        onMouseEnter={handleMouseEnter}\n                        onMouseLeave={handleMouseLeave}\n                    >\n                        <span>actinide</span>\n                        <div className='classColor'></div>\n                    </div>\n\n                    <div\n                        className='class'\n                        onMouseEnter={handleMouseEnter}\n                        onMouseLeave={handleMouseLeave}\n                    >\n                        <span>transition metal</span>\n                        <div className='classColor'></div>\n                    </div>\n\n                    <div\n                        className='class'\n                        onMouseEnter={handleMouseEnter}\n                        onMouseLeave={handleMouseLeave}\n                    >\n                        <span>post-transition metal</span>\n                        <div className='classColor'></div>\n                    </div>\n\n                    <div\n                        className='class'\n                        onMouseEnter={handleMouseEnter}\n                        onMouseLeave={handleMouseLeave}\n                    >\n                        <span>metalloid</span>\n                        <div className='classColor'></div>\n                    </div>\n\n                    <div\n                        className='class'\n                        onMouseEnter={handleMouseEnter}\n                        onMouseLeave={handleMouseLeave}\n                    >\n                        <span>diatomic nonmetal</span>\n                        <div className='classColor'></div>\n                    </div>\n\n                    <div\n                        className='class'\n                        onMouseEnter={handleMouseEnter}\n                        onMouseLeave={handleMouseLeave}\n                    >\n                        <span>polyatomic nonmetal</span>\n                        <div className='classColor'></div>\n                    </div>\n\n                    <div\n                        className='class'\n                        onMouseEnter={handleMouseEnter}\n                        onMouseLeave={handleMouseLeave}\n                    >\n                        <span>noble gas</span>\n                        <div className='classColor'></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Panel;\n","import React, { useState } from 'react';\nimport PeriodicTable from './components/PeriodicTable';\nimport Panel from './components/Panel';\n\nfunction App() {\n  return (\n    <div id='App'>\n      <PeriodicTable />\n      <Panel />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}