{"version":3,"sources":["components/Element/ElementSymbol.js","components/Element/ElementAtomicNumber.js","components/Element/ElementName.js","components/Element/ElementInfoCard.js","utils/EventEmitter.js","components/Element/ElementBox.js","components/PeriodicTable.js","components/Panel.js","App.js","reportWebVitals.js","index.js"],"names":["ElementSymbol","props","mesh","useRef","useLayoutEffect","current","geometry","center","active","hovered","text","symbol","textOptions","font","FontLoader","parse","Roboto","size","height","curveSegments","bevelEnabled","ref","attach","args","color","ElementAtomicNumber","atomicNumber","toString","position","ElementName","name","ElementInfoCard","useState","hidden","setVisible","Html","style","border","boxSizing","padding","width","background","borderRadius","fontSize","transition","opacity","transform","distanceFactor","occlude","onOcclude","element","EventEmitter","ElementBox","iMesh","setActive","setHover","panelClassHover","setPanelClassHover","addListener","e","category","zposition","useSpring","config","wobbly","opa","lanthanide","metalloid","actinide","ThePositon","xpos","ypos","group","position-z","onClick","stopPropagation","onPointerOver","onPointerOut","meshBasicMaterial","wireframe","transparent","number","PeriodicTable","id","camera","data","elements","map","xoffset","yoffset","OrbitControls","Panel","handleMouseEnter","emit","target","innerText","handleMouseLeave","className","onMouseEnter","onMouseLeave","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4453ff8.chunk.js","sourcesContent":["import React, { useRef, useLayoutEffect } from 'react';\nimport Roboto from '../../assets/helvetiker_regular.typeface.json';\nimport { FontLoader } from 'three';\n\nfunction ElementSymbol(props) {\n  const mesh = useRef(null);\n\n  useLayoutEffect(() => {\n    mesh.current.geometry.center();\n  }, [props.active, props.hovered]);\n\n  const text = props.symbol || 'H';\n  const font = new FontLoader().parse(Roboto);\n  const textOptions = {\n    font: font,\n    size: 0.3,\n    height: 0.02,\n    curveSegments: 5,\n    bevelEnabled: false,\n  };\n  return (\n    <mesh ref={mesh}>\n      <textBufferGeometry attach='geometry' args={[text, textOptions]} />\n      <meshBasicMaterial attach='material' color={props.color || 'white'} />\n    </mesh>\n  );\n}\n\nexport default ElementSymbol;\n","import React, { useRef, useLayoutEffect } from 'react';\nimport Roboto from '../../assets/helvetiker_regular.typeface.json';\nimport { FontLoader } from 'three';\n\nfunction ElementAtomicNumber(props) {\n  const mesh = useRef(null);\n\n  useLayoutEffect(() => {\n    mesh.current.geometry.center();\n  }, [props.active, props.hovered]);\n\n  const text = props.atomicNumber.toString() || '1';\n  const font = new FontLoader().parse(Roboto);\n  const textOptions = {\n    font: font,\n    size: 0.1,\n    height: 0.02,\n    curveSegments: 5,\n    bevelEnabled: false,\n  };\n  return (\n    <mesh ref={mesh} position={[0.2, 0.3, 0]}>\n      <textGeometry attach='geometry' args={[text, textOptions]} />\n      <meshBasicMaterial attach='material' color={props.color || 'white'} />\n    </mesh>\n  );\n}\n\nexport default ElementAtomicNumber;\n","import React, { useRef, useLayoutEffect } from 'react';\nimport Roboto from '../../assets/helvetiker_regular.typeface.json';\nimport { FontLoader } from 'three';\n\nfunction ElementName(props) {\n  const mesh = useRef(null);\n\n  useLayoutEffect(() => {\n    mesh.current.geometry.center();\n  }, [props.active, props.hovered]);\n\n  const text = props.name || 'Hydrohen';\n  const font = new FontLoader().parse(Roboto);\n  const textOptions = {\n    font: font,\n    size: 0.1,\n    height: 0.02,\n    curveSegments: 5,\n    bevelEnabled: false,\n  };\n  return (\n    <mesh ref={mesh} position={[0, -0.3, 0]}>\n      <textGeometry attach='geometry' args={[text, textOptions]} />\n      <meshBasicMaterial attach='material' color={props.color || 'white'} />\n    </mesh>\n  );\n}\n\nexport default ElementName;\n","import React, { useState } from 'react';\nimport { Html } from '@react-three/drei';\n\nfunction ElementInfoCard(props) {\n  const [hidden, setVisible] = useState(false);\n\n  return (\n    <mesh>\n      <Html\n        style={{\n          border: '1px solid rgba(255, 255, 255, 0.5)',\n          boxSizing: 'border-box',\n          padding: '20px',\n          width: '600px',\n          height: '600px',\n          background: 'rgba(255, 255, 255, 0.1)',\n          borderRadius: '10px',\n          color: 'white',\n          fontSize: '36px',\n          transition: 'all 0.2s',\n          opacity: hidden ? 0 : 1,\n          transform: `scale(${hidden ? 0.5 : 1})`,\n        }}\n        distanceFactor={1.5}\n        position={[1.5, -1.5, 1]}\n        transform\n        occlude\n        onOcclude={setVisible}\n      >\n        <div>\n          <h1>{props.element.name}</h1>\n        </div>\n      </Html>\n    </mesh>\n  );\n}\n\nexport default ElementInfoCard;\n","import { EventEmitter } from 'fbemitter';\n\nexport default new EventEmitter();\n","import React, { useRef, useState, useContext } from 'react';\nimport ElementSymbol from './ElementSymbol';\nimport ElementAtomicNumber from './ElementAtomicNumber';\nimport ElementName from './ElementName';\nimport { useSpring, animated, config } from '@react-spring/three';\nimport ElementInfoCard from './ElementInfoCard';\nimport EventEmitter from '../../utils/EventEmitter';\n\nfunction ElementBox(props) {\n  const iMesh = useRef();\n  const [active, setActive] = useState(false);\n  const [hovered, setHover] = useState(false);\n  const [panelClassHover, setPanelClassHover] = useState(false);\n\n  EventEmitter.addListener('PanelClassHover', (e) => {\n    if (e === props.element.category) {\n      setPanelClassHover(true);\n    }\n  });\n\n  EventEmitter.addListener('PanelClassNotHover', () => {\n    setPanelClassHover(false);\n  });\n\n  // EventEmitter.addListener('PanelClassHoverPasif', (e) => {\n  //   if (e === 'leave') {\n  //     setActive(false);\n  //   }\n  // });\n\n  const { zposition } = useSpring({\n    zposition: active || panelClassHover ? 2 : 1,\n    config: config.wobbly,\n  });\n\n  const { opa } = useSpring({\n    opa: hovered || active || panelClassHover ? 0.2 : 0.1,\n    config: config.wobbly,\n  });\n\n  const colorMap = {\n    'noble gas': '#04bcd4',\n    'alkaline earth metal': '#ff9800',\n    'diatomic nonmetal': '#673ab7',\n    'alkali metal': '#f44336',\n    'transition metal': '#efbb31',\n    'post-transition metal': '#218380',\n    'polyatomic nonmetal': '#03a9f3',\n    lanthanide: '#8bc34a',\n    metalloid: '#73D2DE',\n    actinide: '#ccdc3a',\n  };\n\n  const color = colorMap[props.element.category] || 'white';\n\n  const xpos = props.element.xpos - 8;\n  const ypos = props.element.ypos * -1 + 6.5;\n\n  const ThePositon = [xpos, ypos, 1];\n\n  const handleClick = (e) => {\n    e.stopPropagation();\n    setActive(!active);\n  };\n\n  const handlePointerOver = (e) => {\n    e.stopPropagation();\n    setHover(true);\n  };\n\n  const handlePointerOut = (e) => {\n    e.stopPropagation();\n    setHover(false);\n  };\n\n  return (\n    <animated.group\n      position-z={zposition}\n      onClick={handleClick}\n      onPointerOver={handlePointerOver}\n      onPointerOut={handlePointerOut}\n      ref={iMesh}\n      position={ThePositon}\n    >\n      <mesh>\n        <boxBufferGeometry />\n        <animated.meshBasicMaterial\n          color={color}\n          wireframe={false}\n          transparent={true}\n          opacity={opa}\n        />\n      </mesh>\n      <ElementSymbol\n        symbol={props.element.symbol}\n        color={color}\n        active={active}\n        hovered={hovered}\n      />\n      <ElementAtomicNumber\n        atomicNumber={props.element.number}\n        color={color}\n        active={active}\n        hovered={hovered}\n      />\n      <ElementName\n        name={props.element.name}\n        color={color}\n        active={active}\n        hovered={hovered}\n      />\n      {active && <ElementInfoCard element={props.element} />}\n    </animated.group>\n  );\n}\n\nexport default ElementBox;\n","import React, { useState, useEffect } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport ElementBox from './Element/ElementBox';\nimport { OrbitControls } from '@react-three/drei';\nimport data from '../assets/periodicTable.json';\n\nfunction PeriodicTable(props) {\n  return (\n    <div id='canvas-container'>\n      <Canvas camera={{ position: [0, 0, 12] }}>\n        {data.elements.map((element) => {\n          let xoffset = (element.xpos - 1) / 50;\n          element.xpos += xoffset;\n\n          let yoffset = (element.ypos - 1) / 50;\n          element.ypos += yoffset;\n\n          return <ElementBox key={element.name} element={element} />;\n        })}\n        <OrbitControls />\n      </Canvas>\n    </div>\n  );\n}\n\nexport default PeriodicTable;\n","import { useState, useContext } from 'react';\nimport EventEmitter from '../utils/EventEmitter';\n\nfunction Panel() {\n  const handleMouseEnter = (e) => {\n    EventEmitter.emit('PanelClassHover', e.target.innerText);\n  };\n\n  const handleMouseLeave = (e) => {\n    EventEmitter.emit('PanelClassNotHover', 'Not');\n  };\n\n  return (\n    <div>\n      <div id='elementClassesContainer'>\n        <h1>Periodic Table</h1>\n\n        <div className='elementClasses'>\n          <div\n            className='class'\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          >\n            <span>alkali metal</span>\n            <div className='classColor'></div>\n          </div>\n\n          <div\n            className='class'\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          >\n            <span>alkaline earth metal</span>\n            <div className='classColor'></div>\n          </div>\n\n          <div\n            className='class'\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          >\n            <span>lanthanide</span>\n            <div className='classColor'></div>\n          </div>\n\n          <div\n            className='class'\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          >\n            <span>actinide</span>\n            <div className='classColor'></div>\n          </div>\n\n          <div\n            className='class'\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          >\n            <span>transition metal</span>\n            <div className='classColor'></div>\n          </div>\n\n          <div\n            className='class'\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          >\n            <span>post-transition metal</span>\n            <div className='classColor'></div>\n          </div>\n\n          <div\n            className='class'\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          >\n            <span>metalloid</span>\n            <div className='classColor'></div>\n          </div>\n\n          <div\n            className='class'\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          >\n            <span>diatomic nonmetal</span>\n            <div className='classColor'></div>\n          </div>\n\n          <div\n            className='class'\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          >\n            <span>polyatomic nonmetal</span>\n            <div className='classColor'></div>\n          </div>\n\n          <div\n            className='class'\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          >\n            <span>noble gas</span>\n            <div className='classColor'></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Panel;\n","import React, { useState } from 'react';\nimport PeriodicTable from './components/PeriodicTable';\nimport Panel from './components/Panel';\n\nfunction App() {\n  return (\n    <div id='App'>\n      <PeriodicTable />\n      <Panel />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}